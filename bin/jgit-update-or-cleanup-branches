#!/bin/bash

# load common functions and variables
SCRIPT_DIR="$(dirname "$(readlink -f "${0}")")"
. "${SCRIPT_DIR}/../inc/common.sh"

common_setup_env

cd "${REPO_DIR}" || {
    error "Unable to change directories"
    exit 255
}

CUR_BRANCH=$(git symbolic-ref --short HEAD)
DEST_BRANCH=origin/main

cleanup() {
    echo "Cleaning up, returning branch to ${CUR_BRANCH}"
    git checkout "${CUR_BRANCH}" || {
        error "Failed to cleanup!"
    }
}

rebase_or_clean() {
    local branch_name
    branch_name="${1}"

    git checkout "${branch_name}" >/dev/null
    git rebase --empty=drop "${DEST_BRANCH}" || {
        error "Couldn't cleanly rebase ${branch_name} onto ${DEST_BRANCH}"
        git rebase --abort
        return 1
    }

    # If we're the same as DEST_BRANCH now, this branch is fully merged
    git checkout "${CUR_BRANCH}" >/dev/null
    if git branch --contains "${branch_name}" | grep "main"; then
        # Use lowercase d to make it fail if we were wrong somehow (?)
        git branch -d "${branch_name}"
        info "${branch_name} merged and cleaned up"

        sed -i -n "/${branch_name}/!p" "${BRANCH_LIST}"

        return 0
    fi

    info "${branch_name} is not yet merged"
    return 1
}

trap cleanup SIGHUP SIGINT SIGQUIT SIGABRT EXIT

git diff --quiet || {
    error "Branch is currently in a dirty state."
    exit 1
}

[ -z "$(git status -s)" ] || {
    error "Branch has uncommited changes."
    exit 1
}

git fetch --prune || {
    error "Failed to prune"
    exit 1
}

for branch_name in $(git branch --list | cut -b3-)
do
    [[ ${branch_name} =~ ^#.* ]] && continue
    [[ -z ${branch_name} ]] && continue
    [[ ${branch_name} =~ ^origin\/.* ]] && continue
    [[ ${branch_name} = "main" ]] && continue

    if rebase_or_clean "${branch_name}"; then
        echo "Cleaned"
    fi

    echo ""

done
