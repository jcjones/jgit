#!/bin/bash

# load common functions and variables
SCRIPT_DIR="$(dirname "$(readlink -f "${0}")")"
. "${SCRIPT_DIR}/../inc/common.sh"

common_setup_env

cd "${REPO_DIR}" || {
    error "Unable to change directories"
    exit 255
}

CUR_BRANCH=$(git symbolic-ref --short HEAD)

cleanup() {
    echo "Cleaning up, returning branch to ${CUR_BRANCH}"
    git checkout "${CUR_BRANCH}"
}

may_be_merged() {
    branch_name="${1}"

    if [[ "${branch_name}" =~ (IN-0000) ]] ; then
       echo "# ${branch_name} is a WIP branch"
       return 1
    fi

    if git branch -r | grep "origin/${branch_name}" >/dev/null ; then
        echo "# Found ${branch_name} in origin branches, probably not merged"
        return 1
    fi

    if [[ "${branch_name}" =~ (IN-[0-9]+) ]] ; then
        ticket_number="${BASH_REMATCH[1]}"

        if git log -n 500 origin/main | grep "${ticket_number}" >/dev/null 2>&1 ; then
            echo "# Found ${ticket_number} in git log, probably merged"
            return 0
        fi

    fi

    echo "# ${branch_name} Not found, probably not merged"
    return 1
}

trap cleanup SIGHUP SIGINT SIGQUIT SIGABRT EXIT

git diff --quiet || {
    error "Branch is currently in a dirty state."
    exit 1
}

[ -z "$(git status -s)" ] || {
    error "Branch has uncommited changes."
    exit 1
}

[ -r "${BRANCH_LIST}" ] || {
    error "Couldn't find ${BRANCH_LIST} branch list file"
    exit 1
}

git fetch --prune || {
    error "Failed to prune"
    exit 1
}

while IFS= read -r branch_name
do
    [[ ${branch_name} =~ ^#.* ]] && continue
    [[ -z ${branch_name} ]] && continue
    [[ ${branch_name} =~ ^origin\/.* ]] && continue

    git rev-parse "${branch_name}" 2>/dev/null || {
        error "Branch ${branch_name} is missing"
        subl "${BRANCH_LIST}"
        continue
    }

    if may_be_merged "${branch_name}"; then
        echo "git branch -D ${branch_name}"
        echo "sed -i -n '/${branch_name}/!p' ${BRANCH_LIST}"
        echo ""
    fi

    echo ""

done < "${BRANCH_LIST}"
